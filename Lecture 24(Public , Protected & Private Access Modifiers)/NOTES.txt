| Modifier    | Access Scope                                                                |
| ----------- | --------------------------------------------------------------------------- |
| `public`    | Accessible **everywhere** (inside the class, subclass, and outside).        |
| `protected` | Accessible **inside the class** and **in subclasses**, but **not outside**. |
| `private`   | Accessible **only inside the class**. Not in subclasses or outside.         |

Code Example:

class Persons {
  public name: string;         // ‚úÖ Accessible from anywhere
  protected age: number;       // üîê Accessible within this class and its subclasses
  private hobbies: string[];   // üö´ Only accessible within this class

  constructor(name: string, age: number, hobbies: string[]) {
    this.name = name;
    this.age = age;
    this.hobbies = hobbies;
  }

  introduce(): string {
    return `Hi I'm ${this.name} and I'm ${this.age} years old. I love ${this.hobbies.join(", ")}.`;
  }
}

class Student extends Persons {
  public grade: number;

  constructor(name: string, age: number, hobbies: string[], grade: number) {
    super(name, age, hobbies);
    this.grade = grade;
  }

  introduce(): string {
    // ‚úÖ this.name is public ‚Üí accessible here
    // ‚úÖ this.age is protected ‚Üí accessible here
    // ‚ùå this.hobbies is private ‚Üí NOT accessible here ‚Üí will cause an error
    return `Hi I'm ${this.name}, I'm ${this.age} years old, and I'm in grade ${this.grade}.`;
    // üõë this.hobbies.join(", ") would cause a compile-time error
  }
}

-->  What happens if we try to access these outside the class?

const student1 = new Student("Adil", 25, ["coding", "sports"], 10);

console.log(student1.name);    // ‚úÖ Works (public)
console.log(student1.grade);   // ‚úÖ Works (public)

console.log(student1.age);     // ‚ùå Error: 'age' is protected
console.log(student1.hobbies); // ‚ùå Error: 'hobbies' is private

NOTE: Private variables cannot be accessed outside of the class even through public functions in TypeScript but protected variable can access through function outside class.

EXAMPLE:

class Persons {
  public name: string;
  protected age: number;
  private hobbies: string[];

  constructor(name: string, age: number, hobbies: string[]) {
    this.name = name;
    this.age = age;
    this.hobbies = hobbies;
  }

  // Public method to get a protected value (age)
  public getAge(): number {
    return this.age;  // ‚úÖ Accessing protected within the class is fine
  }

  // Public method to get private value (hobbies)
  public getHobbies(): string[] {
    return this.hobbies;  // ‚ùå ERROR: Property 'hobbies' is private and only accessible within class 'Persons'.
  }
}

const person = new Persons("Asad", 12, ["painting", "walking"]);

// Accessing through public method that returns private or protected data
console.log(person.getAge());        // ‚úÖ Works fine: 12
// console.log(person.getHobbies());  // ‚ùå ERROR: Cannot access 'hobbies' as it is private

// ‚ùå Direct access
// console.log(person.hobbies); // Error: Property 'hobbies' is private
